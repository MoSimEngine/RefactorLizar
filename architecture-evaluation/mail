Guten Tag Herr Jung,

um das ganze besser zu erklären, erkläre ich kurz das Projekt.

Kurz zu mir, Ich bin hilfswissenschaftlicher Angestellter "Hiwi" und Master Student im 3.ten Semester. 
Mein Schwerpunkt liegt auf der Analyse von Java Code.

Sandro Koch und ich, arbeiten an der Analyse, Verbesserung der Wartbarkeit und Modularisierung von Simulator Code.
Dafür haben wir ein Tool entwickelt was verschiedene Designsmells in einem Simulator Code wie Simulalizar erkennt.

Nun beschäftigen wir uns gerade mit der Bewertung von Simulator Code. Dafür ist die Vorgabe die Allen Metriken zu nutzen.
Eines der Ergebnisse Ihre Promotion ist ihr Tool zu Berechnung dieser Metriken. Bei diesem Tool haben wir leider Probleme festgestellt.
Aufgrund dieser Probleme entwickeln wir eine Nachimplementierung mit einem anderen Techstack für Java Code.

Zielsetzung:

- Analyse von neustem Java Code.
- Headless ohne Abhängigkeiten zu IDE Frameworks.(Backend), ein Frontend Eclipse Plugin wäre leicht zu entwickeln.
- Berechnung der Allen Metriken auf Hyper Graphen
- Unterstützung von DataTypePattern und ObservedSystem

Probleme an Ihre Implementierung:

- JDT Framework
- Unfertige Analyse Stellen
- Eclipse Abhängigkeit
- +1 Shift in der Size Metrik

JDT Framework:

Sie haben ja das JDT Framework zur Analyse von Java Code verwendet. Dies ist durchaus komplex und nicht ganz fehlerbefreit, wie sie in ihrem Code bemerkt haben.
Zeitgleich benötigt es viel Wartung um die neuen Java Versionen zu unterstützen. Ihr Tool schafft leider nu Java 8. Deswegen haben wir uns für Spoon entschieden.
Dieses Framework ist eine API auf JDT mit Vorteilen wie noClasspathMode und hoher Wartbarkeit. Bugs lassen sich direkt von mir fixen und müssen nicht über die Eclipse Mailliste.

Unfertige Analyse Stellen:

Innerhalb ihres Code sind leider einige todo Kommentare noch vorhanden. Dies ist natürlich verständlich bei einer wissenschaftlichen Arbeit, weil die vollständige Implementierung wissenschaftlich nicht sehr wertvoll ist.
Dies behindert leider eine Erweiterung des Frameworks auf neue JDT Versionen zusätzlich.
Siehe auch https://github.com/rju/architecture-evaluation-tool/issues/14


Fragen zur Nachimplementierung:

Aktuell baue ich ihr Tool nach, aber währenddessen haben sich ein paar Fragen ergeben:

HyperEdge:

Wir konnten keine Stelle entdecken an der eine Hyper Edge statt einer normalem Edge im Java Code erstellt wird.
Was ist Ihre Definition einer Hyper Edge in ihrem Model? Erfüllen diese normalen Kanten nicht auch?

+1 Shift in der Size Metrik:

In der Berechnung der Größe des Hyper Graphen addieren sie +1 auf die Anzahl der Knoten. Siehe
https://github.com/rju/architecture-evaluation-tool/blob/9ddfe10eeb103054c824c1750e7b3389b9392f36/de.cau.cs.se.software.evaluation/src/de/cau/cs/se/software/evaluation/transformation/metric/CalculateSizePartitionJob.xtend#L84
In dem Ursprungspaper konnte ich keine Begründung dafür finden. Ist dies ein Fehler in der Implementierung oder habe ich eine Stelle in ihrer Thesis überlesen?
Die system.node.size enthält schon den zusätzlichen Systemknoten.

Daten:

Sie hatte gefragt welche Daten wertvoll für uns sind. Faktisch aller Java Code wo Sie die Metriken berechnet und verifiziert haben.

Ich hoffe dies hat einige Ihrer Fragen beantwortet 

Mfg Martin Wittlinger