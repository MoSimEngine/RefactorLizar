/*
 * This simple QVTO SimuLizar reconfiguration rule migrates the application to another
 * server node as defined by the OptimizationPlan
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype ACTION_MAPPING uses 'http://simulizar.palladiosimulator.org/Actions/Mapping/1.1';
modeltype ACTION_CORE uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';

transformation vmMigration(
							inout pcmAllocation : PCM_ALLOC,
							in pcmControllerRepository : PCM_REP,
							in actionRoleSet : ACTION_INSTANCE,
							in actionStep : ACTION_CORE,
							out actionMapping : ACTION_MAPPING
							) {
							
	property migrationController : BasicComponent;
	property migrationSourceController : BasicComponent;
	property migrationTargetController : BasicComponent;
	property migrationControllerLocation : instance::Role;
	property assemblyRole : instance::Role;
	property targetContainerRole : instance::Role;
		
	property migrationControllerContainer : ResourceContainer;
	property migratedAssembly : AssemblyContext;
	property targetContainer : ResourceContainer;
	property controllerRepositoryId : String = '_y7TzUOp-EeS1xrjFer2CUg';
	property migrateControllerCompletionActionId : String = '_4nuZAOp9EeS7J-g-NrN0TQ';
	
							
	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {	
		assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
			with log ("Allocation Model is empty!");
		var step := actionStep.rootObjects()[ResourceDemandingStep]->any(id = migrateControllerCompletionActionId);
		log("Executing step " + step.entityName);
		var roleSet : RoleSet :=  actionRoleSet.rootObjects()[RoleSet]->any(true);		
		var controllerRepository : Repository := pcmControllerRepository.rootObjects()[Repository]->any(id = controllerRepositoryId);
		
		migrationController := controllerRepository.getComponentById("_63lUEOqDEeS1xrjFer2CUg");
		migrationSourceController := controllerRepository.getComponentById("_CizTUOqEEeS1xrjFer2CUg");
		migrationTargetController := controllerRepository.getComponentById("_FFJUQOqEEeS1xrjFer2CUg");	
			
		var allocation : Allocation := pcmAllocation.rootObjects()[Allocation]->any(true);
		var calls := step.controllerCalls;
		var roles := roleSet.roles;
		
		migrationControllerLocation := roles->select(role | role.roleType.id = "_56tD0ezuEeSasuhUPGMaRg")->any(true);
		assemblyRole := roles->select(role | role.roleType.id = "_kPTj0OztEeSasuhUPGMaRg")->any(true);
		targetContainerRole := roles->select(role | role.roleType.id = "_or2AkeztEeSasuhUPGMaRg")->any(true);
		
		migrationControllerContainer := migrationControllerLocation.value.oclAsType(ResourceContainer);
		migratedAssembly := migrationControllerLocation.value.oclAsType(AssemblyContext);
		targetContainer := targetContainerRole.value.oclAsType(ResourceContainer);
		
		var assembly : AssemblyContext := getMigrationControllerAssembly(allocation, migrationControllerContainer, migratedAssembly.getControllerHost(allocation), targetContainer);
		var res := assembly = null;
		if(assembly = null) {
			step.map vmMigrate(allocation, controllerRepository, roleSet);	
		} else {
			log (assembly.entityName);
			// TODO FIXME this only works when there is no more than one mapping.
			calls->map createMappingForExistingComponent(assembly, allocation);
		}
	}
	
	mapping ControllerCall::createMappingForExistingComponent(assemblyContext : AssemblyContext, allocation : Allocation) : Mapping@actionMapping {
		var system : System := allocation.system_Allocation;
		result.controllerMappings += object ControllerMapping {
			entityName := 'Preexisting Controller Completion Mapping Lookup';
			mappedCall := self;
			controllerRole := system.providedRoles_InterfaceProvidingEntity->selectByType(OperationProvidedRole)->select(i | i.providedInterface__OperationProvidedRole.id = self.calledSignature.interface__OperationSignature.id)->oclAsType(OperationProvidedRole)->any(true);			
		};
	}
	
	mapping ResourceDemandingStep::vmMigrate(inout allocation : Allocation, controllerRepository : Repository, roleSet : RoleSet) : Mapping@actionMapping {
		log("Adding controllers for VM migration");
		result.controllerMappings := self.controllerCalls->map addVMControllers(allocation, controllerRepository, roleSet)
	}
	
	query getMigrationControllerAssembly(allocation : Allocation, controllerLocation : ResourceContainer, sourceLocation : ResourceContainer, targetLocation : ResourceContainer) : AssemblyContext {
		var assembliesOnLocation := allocation.allocationContexts_Allocation->select(c | c.resourceContainer_AllocationContext.id = controllerLocation.id);
		assembliesOnLocation->forEach(controller) {
			log('Assemblies on location: ' + controller.id);
		};
		var migrationControllersOnLocation := assembliesOnLocation.assemblyContext_AllocationContext->select(c | c.encapsulatedComponent__AssemblyContext.id = migrationController.id);
		migrationControllersOnLocation->forEach(migrController) {
			log('Migration controllers on target: ' + migrController.encapsulatedComponent__AssemblyContext.id);
		};
		var connectors := allocation.system_Allocation.connectors__ComposedStructure->selectByType(AssemblyConnector);
		connectors->forEach(conn) {
			log('Connection id: ' + conn.id);
		};
		var cProvidingController := connectors->select(c | migrationControllersOnLocation.id->includes(c.requiringAssemblyContext_AssemblyConnector.id));
		cProvidingController->forEach(controller) {
			log('Controller id: ' + controller.id);
		};
		var connCorrectSource := cProvidingController->select(c | c.providingAssemblyContext_AssemblyConnector.getControllerHost(allocation).id = sourceLocation.id);
		var connCorrectTarget := cProvidingController->select(c | c.providingAssemblyContext_AssemblyConnector.getControllerHost(allocation).id = targetLocation.id);
		return connCorrectSource->intersection(connCorrectTarget).requiringAssemblyContext_AssemblyConnector->any(true);
	}
	
	mapping ControllerCall::addVMControllers(inout allocation : Allocation, controllerRepository : Repository, roleSet : RoleSet) : ControllerMapping {
		log("Adding VM controllers");
		
		var assemblyMigrationController : AssemblyContext := migrationController.createAssembly(migratedAssembly.getControllerHost(allocation));
		var assemblyMigrationSource : AssemblyContext := migrationSourceController.createAssembly(migratedAssembly.getControllerHost(allocation));
		var assemblyMigrationTarget : AssemblyContext := migrationTargetController.createAssembly(targetContainer);
		var system : System := allocation.system_Allocation;
		
		system.assemblyContexts__ComposedStructure += assemblyMigrationController;
		system.assemblyContexts__ComposedStructure += assemblyMigrationSource;
		system.assemblyContexts__ComposedStructure += assemblyMigrationTarget;
		
		system.connectors__ComposedStructure += linkAssemblies(assemblyMigrationController, migrationController.selectRequiredRoleById('_Jh2wIOqEEeS1xrjFer2CUg'),
						assemblyMigrationSource, migrationSourceController.selectProvidedRoleById('_N0MvEOqEEeS1xrjFer2CUg'));	
		system.connectors__ComposedStructure += linkAssemblies(assemblyMigrationController, migrationController.selectRequiredRoleById('_KbTgoOqEEeS1xrjFer2CUg'),
						assemblyMigrationTarget, migrationTargetController.selectProvidedRoleById('_8UdsUOqEEeS1xrjFer2CUg'));	
		system.connectors__ComposedStructure += linkAssemblies(assemblyMigrationTarget, migrationTargetController.selectRequiredRoleById('_XxISQOqEEeS1xrjFer2CUg'),
						assemblyMigrationSource, migrationSourceController.selectProvidedRoleById('_XNbvUOqEEeS1xrjFer2CUg'));
		assemblyMigrationController.allocateAt(allocation, migrationControllerContainer);
		assemblyMigrationSource.allocateAt(allocation, migrationControllerContainer);
		assemblyMigrationTarget.allocateAt(allocation, targetContainer);
		
		// add system interface to controller component
		var controllerProvidedRole := object OperationProvidedRole {
			entityName := 'SystemProvided' + assemblyMigrationController.entityName;
			providingEntity_ProvidedRole := migrationController;
			providedInterface__OperationProvidedRole := self.calledSignature.interface__OperationSignature;			
		};
		
		system.providedRoles_InterfaceProvidingEntity += controllerProvidedRole;
		system.connectors__ComposedStructure += object ProvidedDelegationConnector {
			innerProvidedRole_ProvidedDelegationConnector := migrationController.selectProvidedRoleById('_ITgtsOqEEeS1xrjFer2CUg');
			outerProvidedRole_ProvidedDelegationConnector := controllerProvidedRole;
			assemblyContext_ProvidedDelegationConnector := assemblyMigrationController;
		};
		result.mappedCall := self;
		result.entityName := 'mapped' + mappedCall.entityName;
		result.controllerRole := controllerProvidedRole;
	}
	
	helper AssemblyContext::allocateAt(inout allocation : Allocation, container : ResourceContainer) {
		allocation.allocationContexts_Allocation += object AllocationContext {
			entityName := self.entityName + 'At' + container.entityName;
			resourceContainer_AllocationContext := container;
			assemblyContext_AllocationContext := self;
		}
	}
	
	query BasicComponent::selectRequiredRoleById(id : String) : OperationRequiredRole {
		return self.requiredRoles_InterfaceRequiringEntity->select(c | c. id = id)->any(true).oclAsType(OperationRequiredRole);
	}
	
	query BasicComponent::selectProvidedRoleById(id : String) : OperationProvidedRole {
		return self.providedRoles_InterfaceProvidingEntity->select(c | c. id = id)->any(true).oclAsType(OperationProvidedRole)
	}
	
	helper linkAssemblies(assemblyRequiring : AssemblyContext, requiredRole : OperationRequiredRole, 
							assemblyProviding : AssemblyContext, providedRole : OperationProvidedRole) : AssemblyConnector {
		return object AssemblyConnector {
			entityName := assemblyRequiring.entityName + "To" + assemblyProviding.entityName;
			requiringAssemblyContext_AssemblyConnector := assemblyRequiring;
			providingAssemblyContext_AssemblyConnector := assemblyProviding;
			requiredRole_AssemblyConnector := requiredRole;
			providedRole_AssemblyConnector := providedRole;			
		}
	}
	
	helper BasicComponent::createAssembly(inout container : ResourceContainer) : AssemblyContext {
		var nameInput := self.entityName;
		return object AssemblyContext {
			entityName :=  nameInput + "AssemblyCtxOn" + container.entityName;
			encapsulatedComponent__AssemblyContext := self;
		}
	}
	
	query Repository::getComponentById(id : String) : BasicComponent {
		return self.components__Repository->select(component | component.id = id)->any(true)->oclAsType(BasicComponent)->any(true);
	}
	
	query AssemblyContext::getControllerHost(allocation : Allocation) : ResourceContainer {
		return allocation.allocationContexts_Allocation->select(allocationContext |allocationContext.assemblyContext_AllocationContext.id = self.id)->any(true).resourceContainer_AllocationContext;
	}
	
	query getResourceEnv() : ResourceEnvironment{
		var resEnv:=pcmAllocation.rootObjects()[Allocation].targetResourceEnvironment_Allocation;
		return resEnv->any(true);
	}
	
}